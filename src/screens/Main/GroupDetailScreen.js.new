import React, { useState, useEffect, useCallback, useRef } from 'react';
import { View, Text, StyleSheet, Image, TouchableOpacity, ActivityIndicator, FlatList, RefreshControl, ScrollView, Dimensions } from 'react-native';
import { useNavigation, useRoute } from '@react-navigation/native';
import { supabase } from '../../lib/supabaseClient';
import { Ionicons, Feather, MaterialIcons } from '@expo/vector-icons';
import { COLORS } from '../../constants/theme';
import AppHeader from '../../components/layout/AppHeader';
import PostCreationModal from '../../components/social/PostCreationModal';
import { useUser } from '../../context/UserContext';
import ActionButton from '../../components/common/ActionButton';

const TABS = ['Posts', 'Members'];
const windowWidth = Dimensions.get('window').width;

const GroupDetailScreen = () => {
  const navigation = useNavigation();
  const route = useRoute();
  const { groupId } = route.params || {};
  const { user } = useUser();
  
  console.log('GroupDetailScreen mounted. Received groupId:', groupId);
  
  // Group state
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [group, setGroup] = useState(null);
  const [memberCount, setMemberCount] = useState(0);
  const [refreshing, setRefreshing] = useState(false);
  
  // UI state
  const [selectedTab, setSelectedTab] = useState('Posts');
  const [showCreatePostModal, setShowCreatePostModal] = useState(false);
  
  // Posts & Members state
  const [posts, setPosts] = useState([]);
  const [postsLoading, setPostsLoading] = useState(true);
  const [postsError, setPostsError] = useState(null);
  const [members, setMembers] = useState([]);
  const [membersLoading, setMembersLoading] = useState(true);
  const [membersError, setMembersError] = useState(null);

  // Fetch group data
  const fetchGroupData = useCallback(async () => {
    if (!groupId) return;
    
    try {
      setLoading(true);
      setError(null);
      
      const { data, error } = await supabase
        .from('groups')
        .select(`
          *,
          group_types(name),
          group_members(count)
        `)
        .eq('id', groupId)
        .single();
      
      if (error) throw error;
      
      if (data) {
        setGroup(data);
        setMemberCount(data.group_members?.[0]?.count || 0);
      }
    } catch (error) {
      console.error('Error fetching group:', error);
      setError('Failed to load group details');
    } finally {
      setLoading(false);
    }
  }, [groupId]);

  // Fetch group posts
  const fetchGroupPosts = useCallback(async () => {
    if (!groupId) return;
    
    try {
      setPostsLoading(true);
      setPostsError(null);
      
      const { data, error } = await supabase
        .from('group_posts')
        .select(`
          *,
          author:user_profiles(id, username, full_name, avatar_url)
        `)
        .eq('group_id', groupId)
        .order('created_at', { ascending: false });
      
      if (error) throw error;
      
      setPosts(data || []);
    } catch (error) {
      console.error('Error fetching posts:', error);
      setPostsError('Failed to load posts');
    } finally {
      setPostsLoading(false);
    }
  }, [groupId]);

  // Fetch group members
  const fetchGroupMembers = useCallback(async () => {
    if (!groupId) return;
    
    try {
      setMembersLoading(true);
      setMembersError(null);
      
      const { data, error } = await supabase
        .from('group_members')
        .select(`
          *,
          user_profiles(id, username, full_name, avatar_url, bio)
        `)
        .eq('group_id', groupId);
      
      if (error) throw error;
      
      // Transform the data to a more usable format
      const formattedMembers = (data || []).map(member => ({
        id: member.user_profiles.id,
        username: member.user_profiles.username,
        fullName: member.user_profiles.full_name,
        avatarUrl: member.user_profiles.avatar_url,
        bio: member.user_profiles.bio,
        role: member.role,
        joinedAt: member.created_at
      }));
      
      setMembers(formattedMembers);
    } catch (error) {
      console.error('Error fetching members:', error);
      setMembersError('Failed to load members');
    } finally {
      setMembersLoading(false);
    }
  }, [groupId]);

  // Handle refresh
  const handleRefresh = useCallback(async () => {
    setRefreshing(true);
    await Promise.all([
      fetchGroupData(),
      selectedTab === 'Posts' ? fetchGroupPosts() : fetchGroupMembers(),
    ]);
    setRefreshing(false);
  }, [fetchGroupData, fetchGroupPosts, fetchGroupMembers, selectedTab]);

  // Load initial data
  useEffect(() => {
    fetchGroupData();
    fetchGroupPosts();
    fetchGroupMembers();
  }, [fetchGroupData, fetchGroupPosts, fetchGroupMembers]);

  // Handle tab changes
  useEffect(() => {
    if (selectedTab === 'Posts' && posts.length === 0 && !postsLoading) {
      fetchGroupPosts();
    } else if (selectedTab === 'Members' && members.length === 0 && !membersLoading) {
      fetchGroupMembers();
    }
  }, [selectedTab, fetchGroupPosts, fetchGroupMembers, posts.length, members.length, postsLoading, membersLoading]);

  // Handle post creation
  const handlePostCreated = useCallback((newPost) => {
    setPosts(prevPosts => [newPost, ...prevPosts]);
  }, []);

  // Render posts tab content
  const renderPostsTab = () => {
    if (postsLoading && !refreshing && posts.length === 0) {
      return (
        <View style={styles.centeredContainer}>
          <ActivityIndicator size="large" color={COLORS.DARK_GREEN} />
        </View>
      );
    }

    if (postsError && !refreshing) {
      return (
        <View style={styles.centeredContainer}>
          <Text style={styles.errorText}>{postsError}</Text>
          <TouchableOpacity onPress={fetchGroupPosts} style={styles.retryButton}>
            <Text style={styles.retryButtonText}>Try Again</Text>
          </TouchableOpacity>
        </View>
      );
    }

    return (
      <FlatList
        data={posts}
        keyExtractor={item => item.id}
        contentContainerStyle={styles.postsList}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={handleRefresh}
            colors={[COLORS.DARK_GREEN]}
            tintColor={COLORS.DARK_GREEN}
          />
        }
        renderItem={({ item }) => (
          <View style={styles.postCard}>
            <View style={styles.postHeader}>
              <Image 
                source={{ uri: item.author?.avatar_url || 'https://via.placeholder.com/40' }} 
                style={styles.postAvatar}
              />
              <View style={styles.postAuthorInfo}>
                <Text style={styles.postAuthorName}>
                  {item.author?.full_name || item.author?.username || 'User'}
                </Text>
                <Text style={styles.postTime}>
                  {new Date(item.created_at).toLocaleString()}
                </Text>
              </View>
            </View>
            <Text style={styles.postContent}>{item.content}</Text>
            {item.media_url && (
              <Image 
                source={{ uri: item.media_url }} 
                style={styles.postImage}
                resizeMode="cover"
              />
            )}
            <View style={styles.postActions}>
              <TouchableOpacity style={styles.postAction}>
                <Ionicons name="heart-outline" size={20} color="#666" />
                <Text style={styles.postActionText}>Like</Text>
              </TouchableOpacity>
              <TouchableOpacity style={styles.postAction}>
                <Ionicons name="chatbubble-outline" size={20} color="#666" />
                <Text style={styles.postActionText}>Comment</Text>
              </TouchableOpacity>
              <TouchableOpacity style={styles.postAction}>
                <Ionicons name="share-social-outline" size={20} color="#666" />
                <Text style={styles.postActionText}>Share</Text>
              </TouchableOpacity>
            </View>
          </View>
        )}
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Ionicons name="document-text-outline" size={48} color="#ccc" />
            <Text style={styles.emptyText}>No posts yet</Text>
            <Text style={styles.emptySubText}>Be the first to post in this group!</Text>
          </View>
        }
      />
    );
  };

  // Render members tab content
  const renderMembersTab = () => {
    if (membersLoading && !refreshing && members.length === 0) {
      return (
        <View style={styles.centeredContainer}>
          <ActivityIndicator size="large" color={COLORS.DARK_GREEN} />
        </View>
      );
    }

    if (membersError && !refreshing) {
      return (
        <View style={styles.centeredContainer}>
          <Text style={styles.errorText}>{membersError}</Text>
          <TouchableOpacity onPress={fetchGroupMembers} style={styles.retryButton}>
            <Text style={styles.retryButtonText}>Try Again</Text>
          </TouchableOpacity>
        </View>
      );
    }

    return (
      <FlatList
        data={members}
        keyExtractor={(item) => item.id}
        contentContainerStyle={styles.membersList}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={handleRefresh}
            colors={[COLORS.DARK_GREEN]}
            tintColor={COLORS.DARK_GREEN}
          />
        }
        renderItem={({ item }) => (
          <View style={styles.memberItem}>
            <Image
              source={{ uri: item.avatarUrl || 'https://via.placeholder.com/50' }}
              style={styles.memberAvatar}
            />
            <View style={styles.memberInfo}>
              <View style={styles.memberNameRow}>
                <Text style={styles.memberName}>{item.fullName || item.username}</Text>
                {item.role === 'admin' && (
                  <View style={styles.adminBadge}>
                    <MaterialIcons name="admin-panel-settings" size={12} color="#fff" />
                    <Text style={styles.adminText}>Admin</Text>
                  </View>
                )}
              </View>
              {item.bio && (
                <Text style={styles.memberBio} numberOfLines={1}>{item.bio}</Text>
              )}
            </View>
          </View>
        )}
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Text style={styles.emptyText}>No members found</Text>
          </View>
        }
      />
    );
  };

  // Render tab content based on selected tab
  const renderTabContent = () => {
    switch (selectedTab) {
      case 'Posts':
        return renderPostsTab();
      case 'Members':
        return renderMembersTab();
      default:
        return null;
    }
  };

  // Render loading state
  if (loading && !refreshing && !group) {
    return (
      <View style={styles.container}>
        <AppHeader 
          title="Group"
          navigation={navigation}
          canGoBack={true}
        />
        <View style={styles.centeredContainer}>
          <ActivityIndicator size="large" color={COLORS.DARK_GREEN} />
        </View>
      </View>
    );
  }

  // Render error state
  if (error && !refreshing) {
    return (
      <View style={styles.container}>
        <AppHeader 
          title="Group"
          navigation={navigation}
          canGoBack={true}
        />
        <View style={styles.centeredContainer}>
          <Text style={styles.errorText}>{error}</Text>
          <TouchableOpacity onPress={fetchGroupData} style={styles.retryButton}>
            <Text style={styles.retryButtonText}>Try Again</Text>
          </TouchableOpacity>
        </View>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <AppHeader 
        title={group?.name || 'Group'}
        navigation={navigation}
        canGoBack={true}
      />
      
      {/* Floating Action Button for Post Creation */}
      {selectedTab === 'Posts' && (
        <View style={styles.fabContainer}>
          <ActionButton
            onPress={() => setShowCreatePostModal(true)}
            iconName="add"
            color={COLORS.DARK_GREEN}
            size={56}
          />
        </View>
      )}
      
      <ScrollView
        style={styles.scrollView}
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={handleRefresh}
            colors={[COLORS.DARK_GREEN]}
            tintColor={COLORS.DARK_GREEN}
          />
        }
      >
        {/* Group Header/Hero Section */}
        <View style={styles.heroContainer}>
          <Image
            source={{ uri: group?.cover_image || 'https://picsum.photos/800/500' }}
            style={styles.coverImage}
            resizeMode="cover"
          />
          <View style={styles.groupInfoCard}>
            <Text style={styles.groupName}>{group?.name || 'Group Name'}</Text>
            <View style={styles.groupTypeContainer}>
              <Ionicons name="pricetag-outline" size={14} color={COLORS.DARK_GREEN} />
              <Text style={styles.groupType}>{group?.group_types?.name || 'General'}</Text>
              
              {group?.is_public && (
                <View style={styles.publicBadge}>
                  <Ionicons name="earth" size={14} color="#fff" />
                  <Text style={styles.publicText}>Public</Text>
                </View>
              )}
            </View>
            <Text style={styles.groupDescription}>{group?.description || 'No description provided'}</Text>
            <View style={styles.groupMetaRow}>
              <View style={styles.metaItem}>
                <Ionicons name="people-outline" size={16} color="#666" />
                <Text style={styles.metaText}>{memberCount} Members</Text>
              </View>
              <View style={styles.metaItem}>
                <Ionicons name="calendar-outline" size={16} color="#666" />
                <Text style={styles.metaText}>
                  Created {new Date(group?.created_at).toLocaleDateString()}
                </Text>
              </View>
            </View>
            
            <View style={styles.actionButtonsRow}>
              <TouchableOpacity style={styles.joinButton}>
                <Text style={styles.joinButtonText}>Join Group</Text>
              </TouchableOpacity>
              <TouchableOpacity style={styles.secondaryButton}>
                <Ionicons name="share-social-outline" size={18} color={COLORS.DARK_GREEN} />
                <Text style={styles.secondaryButtonText}>Share</Text>
              </TouchableOpacity>
              <TouchableOpacity style={styles.secondaryButton}>
                <Ionicons name="star-outline" size={18} color={COLORS.DARK_GREEN} />
                <Text style={styles.secondaryButtonText}>Favorite</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
        
        {/* Tab Bar */}
        <View style={styles.tabBar}>
          {TABS.map(tab => (
            <TouchableOpacity
              key={tab}
              style={[styles.tabBtn, selectedTab === tab && styles.tabBtnActive]}
              onPress={() => setSelectedTab(tab)}
            >
              <Text style={[styles.tabText, selectedTab === tab && styles.tabTextActive]}>{tab}</Text>
            </TouchableOpacity>
          ))}
        </View>
        
        {/* Tab Content */}
        <View style={styles.tabContent}>
          {renderTabContent()}
        </View>
      </ScrollView>
      
      {/* Post Creation Modal */}
      <PostCreationModal
        visible={showCreatePostModal}
        onClose={() => setShowCreatePostModal(false)}
        onPostCreated={handlePostCreated}
        groupId={groupId}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    paddingBottom: 20,
  },
  centeredContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  errorText: {
    fontSize: 16,
    color: '#e74c3c',
    textAlign: 'center',
    marginBottom: 16,
  },
  retryButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    backgroundColor: COLORS.DARK_GREEN,
    borderRadius: 4,
  },
  retryButtonText: {
    color: '#fff',
    fontWeight: '500',
  },
  // Hero Section
  heroContainer: {
    position: 'relative',
    marginBottom: 16,
  },
  coverImage: {
    width: '100%',
    height: 180,
  },
  groupInfoCard: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginHorizontal: 16,
    marginTop: -40,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  groupName: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  groupTypeContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  },
  groupType: {
    fontSize: 14,
    color: COLORS.DARK_GREEN,
    fontWeight: '500',
    marginLeft: 4,
  },
  publicBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: COLORS.DARK_GREEN,
    borderRadius: 12,
    paddingHorizontal: 8,
    paddingVertical: 2,
    marginLeft: 8,
  },
  publicText: {
    fontSize: 12,
    color: '#fff',
    marginLeft: 4,
  },
  groupDescription: {
    fontSize: 14,
    color: '#444',
    marginBottom: 12,
    lineHeight: 20,
  },
  groupMetaRow: {
    flexDirection: 'row',
    marginBottom: 16,
  },
  metaItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 16,
  },
  metaText: {
    fontSize: 13,
    color: '#666',
    marginLeft: 4,
  },
  actionButtonsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  joinButton: {
    backgroundColor: COLORS.DARK_GREEN,
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 8,
    flex: 1,
    marginRight: 8,
  },
  joinButtonText: {
    color: '#fff',
    fontWeight: '500',
    textAlign: 'center',
  },
  secondaryButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: COLORS.DARK_GREEN,
    marginLeft: 8,
  },
  secondaryButtonText: {
    color: COLORS.DARK_GREEN,
    marginLeft: 4,
  },
  // Tab Bar
  tabBar: {
    flexDirection: 'row',
    marginHorizontal: 16,
    marginBottom: 16,
    marginTop: 8,
    borderRadius: 8,
    backgroundColor: '#f5f5f5',
    padding: 4,
  },
  tabBtn: {
    flex: 1,
    paddingVertical: 10,
    alignItems: 'center',
    borderRadius: 6,
  },
  tabBtnActive: {
    backgroundColor: '#fff',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 1,
  },
  tabText: {
    color: '#666',
    fontWeight: '500',
  },
  tabTextActive: {
    color: COLORS.DARK_GREEN,
    fontWeight: 'bold',
  },
  tabContent: {
    flex: 1,
    paddingHorizontal: 16,
  },
  // Posts Tab
  postsList: {
    paddingBottom: 20,
  },
  postCard: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  postHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  postAvatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    marginRight: 12,
  },
  postAuthorInfo: {
    flex: 1,
  },
  postAuthorName: {
    fontWeight: 'bold',
    fontSize: 14,
  },
  postTime: {
    fontSize: 12,
    color: '#666',
  },
  postContent: {
    fontSize: 14,
    lineHeight: 20,
    marginBottom: 12,
  },
  postImage: {
    width: '100%',
    height: 200,
    borderRadius: 8,
    marginBottom: 12,
  },
  postActions: {
    flexDirection: 'row',
    borderTopWidth: 1,
    borderTopColor: '#eee',
    paddingTop: 12,
  },
  postAction: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 16,
  },
  postActionText: {
    marginLeft: 4,
    fontSize: 13,
    color: '#666',
  },
  // Members Tab
  membersList: {
    paddingBottom: 20,
  },
  memberItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  memberAvatar: {
    width: 50,
    height: 50,
    borderRadius: 25,
    marginRight: 16,
  },
  memberInfo: {
    flex: 1,
  },
  memberNameRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 4,
  },
  memberName: {
    fontWeight: 'bold',
    fontSize: 14,
    marginRight: 8,
  },
  adminBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: COLORS.DARK_GREEN,
    borderRadius: 12,
    paddingHorizontal: 6,
    paddingVertical: 2,
  },
  adminText: {
    fontSize: 10,
    color: '#fff',
    marginLeft: 2,
  },
  memberBio: {
    fontSize: 13,
    color: '#666',
  },
  // Empty States
  emptyContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    padding: 40,
  },
  emptyText: {
    fontSize: 16,
    color: '#888',
    marginTop: 10,
    textAlign: 'center',
  },
  emptySubText: {
    fontSize: 14,
    color: '#aaa',
    marginTop: 8,
    textAlign: 'center',
  },
  // FAB
  fabContainer: {
    position: 'absolute',
    bottom: 20,
    right: 20,
    zIndex: 10,
  },
});

export default GroupDetailScreen;
